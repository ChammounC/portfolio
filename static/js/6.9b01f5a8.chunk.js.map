{"version":3,"sources":["components/Input/TextArea.js","components/Input/index.js","pages/Contact/index.js","assets/fonts/gotham-bold.woff2","components/Heading/index.js","components/Text/index.js","components/Section/index.js","components/DecoderText/index.js","components/Divider/index.js"],"names":["TextArea","className","resize","value","onChange","minRows","maxRows","rest","rows","setRows","useState","textareaDimensions","setTextareaDimensions","textareaRef","useRef","useEffect","style","getComputedStyle","current","lineHeight","parseInt","paddingHeight","paddingTop","paddingBottom","_jsx","classNames","ref","event","previousRows","target","currentRows","scrollHeight","scrollTop","Input","id","label","hasValue","multiline","error","onBlur","focused","setFocused","generatedId","useId","errorRef","inputId","labelId","errorId","InputElement","_jsxs","children","htmlFor","undefined","onFocus","TransitionGroup","component","Transition","timeout","msToNum","tokens","base","durationM","status","_errorRef$current","role","isVisible","numToPx","getBoundingClientRect","height","Icon","icon","initDelay","durationS","getDelay","delayMs","initDelayMs","numToMs","multiplier","numDelay","toFixed","Contact","useRouteTransition","email","useFormInput","message","sending","setSending","complete","setComplete","statusError","setStatusError","useScrollRestore","onSubmit","useCallback","async","preventDefault","response","fetch","process","method","mode","headers","body","JSON","stringify","responseMessage","json","errorMessage","fallback","getStatusError","Error","Section","Helmet","name","content","appear","mountOnEnter","unmountOnExit","onEnter","reflow","Heading","prerender","level","as","durationXS","DecoderText","text","start","delay","Divider","required","autoComplete","type","maxLength","errorStatus","Button","disabled","loading","loadingText","Text","size","secondary","iconHoverShift","href","align","weight","clampedLevel","Math","min","max","Component","Fragment","rel","GothamBold","crossorigin","forwardRef","glyphs","CharType","startDelay","output","container","reduceMotion","usePrefersReducedMotion","containerInstance","split","animation","renderOutput","characterMap","map","item","innerHTML","join","springValue","position","index","rand","floor","random","length","shuffle","chain","spring","from","to","stiffness","damping","stop","VisuallyHidden","memo","lineWidth","notchWidth","notchHeight","collapseDelay","collapsed","defaultProps"],"mappings":"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","file":"static/js/6.9b01f5a8.chunk.js","sourcesContent":["import { useRef, useState, useEffect } from 'react'\r\nimport classNames from 'classnames'\r\nimport './TextArea.css'\r\n\r\nconst TextArea = ({\r\n    className,\r\n    resize = 'none',\r\n    value,\r\n    onChange,\r\n    minRows = 1,\r\n    maxRows,\r\n    ...rest\r\n}) => {\r\n    const [rows, setRows] = useState(minRows)\r\n    const [textareaDimensions, setTextareaDimensions] = useState()\r\n    const textareaRef = useRef()\r\n\r\n    useEffect(() => {\r\n        const style = getComputedStyle(textareaRef.current)\r\n        const lineHeight = parseInt(style.lineHeight, 10)\r\n        const paddingHeight =\r\n            parseInt(style.paddingTop, 10) + parseInt(style.paddingBottom, 10)\r\n        setTextareaDimensions({ lineHeight, paddingHeight })\r\n    }, [])\r\n\r\n    const handleChange = event => {\r\n        onChange(event)\r\n\r\n        const { lineHeight, paddingHeight } = textareaDimensions\r\n        const previousRows = event.target.rows\r\n        event.target.rows = minRows\r\n\r\n        const currentRows = ~~((event.target.scrollHeight - paddingHeight) / lineHeight)\r\n\r\n        if (currentRows === previousRows) {\r\n            event.target.rows = currentRows\r\n        }\r\n\r\n        if (maxRows && currentRows >= maxRows) {\r\n            event.target.rows = maxRows\r\n            event.target.scrollTop = event.target.scrollHeight\r\n        }\r\n\r\n        setRows(maxRows && currentRows > maxRows ? maxRows : currentRows)\r\n    }\r\n\r\n    return (\r\n        <textarea\r\n            className={classNames('textarea', className)}\r\n            ref={textareaRef}\r\n            onChange={handleChange}\r\n            style={{ '--resize': resize }}\r\n            rows={rows}\r\n            value={value}\r\n            {...rest}\r\n        />\r\n    )\r\n}\r\n\r\nexport default TextArea\r\n","import { useState, useRef } from 'react'\r\nimport classNames from 'classnames'\r\nimport { TransitionGroup, Transition } from 'react-transition-group'\r\nimport TextArea from './TextArea'\r\nimport { useId } from 'hooks'\r\nimport { isVisible } from 'utils/transition'\r\nimport { tokens } from 'components/ThemeProvider/theme'\r\nimport { msToNum, numToPx } from 'utils/style'\r\nimport Icon from 'components/Icon'\r\nimport './index.css'\r\n\r\nconst Input = ({\r\n    id,\r\n    label,\r\n    hasValue,\r\n    value,\r\n    multiline,\r\n    className,\r\n    style,\r\n    error,\r\n    onBlur,\r\n    ...rest\r\n}) => {\r\n    const [focused, setFocused] = useState(false)\r\n    const generatedId = useId()\r\n    const errorRef = useRef()\r\n    const inputId = id || `input-${generatedId}`\r\n    const labelId = `${inputId}-label`\r\n    const errorId = `${inputId}-error`\r\n    const InputElement = multiline ? TextArea : 'input'\r\n\r\n    const handleBlur = event => {\r\n        setFocused(false)\r\n\r\n        if (onBlur) {\r\n            onBlur(event)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className={classNames('input', className, { 'input--error': !!error })}\r\n            style={style}\r\n        >\r\n            <div className=\"input__content\">\r\n                <label\r\n                    className={classNames('input__label', {\r\n                        'input__label--focused': focused,\r\n                        'input__label--has-value': !!value,\r\n                    })}\r\n                    id={labelId}\r\n                    htmlFor={inputId}\r\n                >\r\n                    {label}\r\n                </label>\r\n                <InputElement\r\n                    className=\"input__element\"\r\n                    id={inputId}\r\n                    aria-labelledby={labelId}\r\n                    aria-describedby={!!error ? errorId : undefined}\r\n                    onFocus={() => setFocused(true)}\r\n                    onBlur={handleBlur}\r\n                    value={value}\r\n                    {...rest}\r\n                />\r\n                <div\r\n                    className={classNames('input__underline', {\r\n                        'input__underline--focused': focused,\r\n                    })}\r\n                />\r\n            </div>\r\n            <TransitionGroup component={null}>\r\n                {!!error && (\r\n                    <Transition timeout={msToNum(tokens.base.durationM)}>\r\n                        {status => (\r\n                            <div\r\n                                className={classNames(\r\n                                    'input__error',\r\n                                    `input__error--${status}`\r\n                                )}\r\n                                id={errorId}\r\n                                role=\"alert\"\r\n                                style={{\r\n                                    '--height': isVisible(status)\r\n                                        ? numToPx(\r\n                                              errorRef.current?.getBoundingClientRect()\r\n                                                  .height\r\n                                          )\r\n                                        : '0px',\r\n                                }}\r\n                            >\r\n                                <div className=\"input__error-message\" ref={errorRef}>\r\n                                    <Icon icon=\"error\" />\r\n                                    {error}\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                    </Transition>\r\n                )}\r\n            </TransitionGroup>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Input\r\n","import { useState, useCallback, useRef } from 'react'\r\nimport classNames from 'classnames'\r\nimport { TransitionGroup, Transition } from 'react-transition-group'\r\nimport { Helmet } from 'react-helmet'\r\nimport Input from 'components/Input'\r\nimport DecoderText from 'components/DecoderText'\r\nimport Divider from 'components/Divider'\r\nimport { Button } from 'components/Button'\r\nimport Section from 'components/Section'\r\nimport Icon from 'components/Icon'\r\nimport { useScrollRestore, useFormInput, useRouteTransition } from 'hooks'\r\nimport { reflow, isVisible } from 'utils/transition'\r\nimport prerender from 'utils/prerender'\r\nimport { msToNum, numToPx, numToMs } from 'utils/style'\r\nimport { tokens } from 'components/ThemeProvider/theme'\r\nimport Heading from 'components/Heading'\r\nimport Text from 'components/Text'\r\nimport './index.css'\r\n\r\nconst initDelay = tokens.base.durationS\r\n\r\nfunction getStatusError({\r\n    status,\r\n    errorMessage,\r\n    fallback = 'There was a problem with your request',\r\n}) {\r\n    if (status === 200) return false\r\n\r\n    const statuses = {\r\n        500: 'There was a problem with the server, try again later',\r\n        404: 'There was a problem connecting to the server. Make sure you are connected to the internet',\r\n    }\r\n\r\n    if (errorMessage) {\r\n        return errorMessage\r\n    }\r\n\r\n    return statuses[status] || fallback\r\n}\r\n\r\nfunction getDelay(delayMs, initDelayMs = numToMs(0), multiplier = 1) {\r\n    const numDelay = msToNum(delayMs) * multiplier\r\n    return { '--delay': numToMs((msToNum(initDelayMs) + numDelay).toFixed(0)) }\r\n}\r\n\r\nconst Contact = () => {\r\n    const { status } = useRouteTransition()\r\n    const errorRef = useRef()\r\n    const email = useFormInput('')\r\n    const message = useFormInput('')\r\n    const [sending, setSending] = useState(false)\r\n    const [complete, setComplete] = useState(false)\r\n    const [statusError, setStatusError] = useState('')\r\n    useScrollRestore()\r\n\r\n    const onSubmit = useCallback(\r\n        async event => {\r\n            event.preventDefault()\r\n            setStatusError('')\r\n\r\n            if (sending) return\r\n\r\n            try {\r\n                setSending(true)\r\n\r\n                const response = await fetch(\r\n                    process.env.REACT_APP_URL,\r\n                    {\r\n                        method: 'POST',\r\n                        mode: 'cors',\r\n                        headers: {\r\n                            'Content-Type': 'application/json',\r\n                        },\r\n                        body: JSON.stringify({\r\n                            email: email.value,\r\n                            message: message.value,\r\n                        }),\r\n                    }\r\n                )\r\n\r\n                const responseMessage = await response.json()\r\n\r\n                const statusError = getStatusError({\r\n                    status: response?.status,\r\n                    errorMessage: responseMessage?.error,\r\n                    fallback: 'There was a problem sending your message',\r\n                })\r\n\r\n                if (statusError) throw new Error(statusError)\r\n\r\n                setComplete(true)\r\n                setSending(false)\r\n            } catch (error) {\r\n                setSending(false)\r\n                setStatusError(error.message)\r\n            }\r\n        },\r\n        [email.value, message.value, sending]\r\n    )\r\n\r\n    return (\r\n        <Section className={classNames('contact', `contact--${status}`)}>\r\n            <Helmet>\r\n                <title>Contact | Chammoun Chakhap</title>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Send me a message if you’re interested in discussing a project or if you just want to say hi\"\r\n                />\r\n            </Helmet>\r\n            <TransitionGroup component={null}>\r\n                {!complete && (\r\n                    <Transition\r\n                        appear\r\n                        mountOnEnter\r\n                        unmountOnExit\r\n                        timeout={1600}\r\n                        onEnter={reflow}\r\n                    >\r\n                        {status => (\r\n                            <form\r\n                                className=\"contact__form\"\r\n                                method=\"post\"\r\n                                onSubmit={onSubmit}\r\n                            >\r\n                                <Heading\r\n                                    className={classNames(\r\n                                        'contact__title',\r\n                                        `contact__title--${status}`,\r\n                                        {\r\n                                            'contact__title--hidden': prerender,\r\n                                        }\r\n                                    )}\r\n                                    level={3}\r\n                                    as=\"h1\"\r\n                                    style={getDelay(\r\n                                        tokens.base.durationXS,\r\n                                        initDelay,\r\n                                        0.3\r\n                                    )}\r\n                                >\r\n                                    <DecoderText\r\n                                        text=\"Say hello\"\r\n                                        start={status !== 'exited' && !prerender}\r\n                                        delay={300}\r\n                                    />\r\n                                </Heading>\r\n                                <Divider\r\n                                    className={classNames(\r\n                                        'contact__divider',\r\n                                        `contact__divider--${status}`,\r\n                                        { 'contact__divider--hidden': prerender }\r\n                                    )}\r\n                                    style={getDelay(\r\n                                        tokens.base.durationXS,\r\n                                        initDelay,\r\n                                        0.4\r\n                                    )}\r\n                                />\r\n                                <Input\r\n                                    required\r\n                                    className={classNames(\r\n                                        'contact__input',\r\n                                        `contact__input--${status}`,\r\n                                        {\r\n                                            'contact__input--hidden': prerender,\r\n                                        }\r\n                                    )}\r\n                                    style={getDelay(tokens.base.durationXS, initDelay)}\r\n                                    autoComplete=\"email\"\r\n                                    label=\"Your Email\"\r\n                                    type=\"email\"\r\n                                    maxLength={512}\r\n                                    {...email}\r\n                                />\r\n                                <Input\r\n                                    required\r\n                                    multiline\r\n                                    className={classNames(\r\n                                        'contact__input',\r\n                                        `contact__input--${status}`,\r\n                                        {\r\n                                            'contact__input--hidden': prerender,\r\n                                        }\r\n                                    )}\r\n                                    style={getDelay(tokens.base.durationS, initDelay)}\r\n                                    autoComplete=\"off\"\r\n                                    label=\"Message\"\r\n                                    maxLength={4096}\r\n                                    {...message}\r\n                                />\r\n                                <TransitionGroup component={null}>\r\n                                    {!!statusError && (\r\n                                        <Transition\r\n                                            timeout={msToNum(tokens.base.durationM)}\r\n                                        >\r\n                                            {errorStatus => (\r\n                                                <div\r\n                                                    className={classNames(\r\n                                                        'contact__form-error',\r\n                                                        `contact__form-error--${errorStatus}`\r\n                                                    )}\r\n                                                    style={{\r\n                                                        '--height': isVisible(errorStatus)\r\n                                                            ? numToPx(\r\n                                                                  errorRef.current?.getBoundingClientRect()\r\n                                                                      .height\r\n                                                              )\r\n                                                            : '0px',\r\n                                                    }}\r\n                                                >\r\n                                                    <div\r\n                                                        className=\"contact__form-error-content\"\r\n                                                        ref={errorRef}\r\n                                                    >\r\n                                                        <div className=\"contact__form-error-message\">\r\n                                                            <Icon\r\n                                                                className=\"contact__form-error-icon\"\r\n                                                                icon=\"error\"\r\n                                                            />\r\n                                                            {statusError}\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                            )}\r\n                                        </Transition>\r\n                                    )}\r\n                                </TransitionGroup>\r\n                                <Button\r\n                                    className={classNames(\r\n                                        'contact__button',\r\n                                        `contact__button--${status}`,\r\n                                        {\r\n                                            'contact__button--hidden': prerender,\r\n                                            'contact__button--sending': sending,\r\n                                        }\r\n                                    )}\r\n                                    style={getDelay(tokens.base.durationM, initDelay)}\r\n                                    disabled={sending}\r\n                                    loading={sending}\r\n                                    loadingText=\"Sending...\"\r\n                                    icon=\"send\"\r\n                                    type=\"submit\"\r\n                                >\r\n                                        Send Message\r\n                                </Button>\r\n                            </form>\r\n                        )}\r\n                    </Transition>\r\n                )}\r\n                {complete && (\r\n                    <Transition\r\n                        appear\r\n                        mountOnEnter\r\n                        unmountOnExit\r\n                        onEnter={reflow}\r\n                        timeout={0}\r\n                    >\r\n                        {status => (\r\n                            <div className=\"contact__complete\" aria-live=\"polite\">\r\n                                <Heading\r\n                                    level={3}\r\n                                    as=\"h3\"\r\n                                    className={classNames(\r\n                                        'contact__complete-title',\r\n                                        `contact__complete-title--${status}`\r\n                                    )}\r\n                                >\r\n                                    Message Sent\r\n                                </Heading>\r\n                                <Text\r\n                                    size=\"l\"\r\n                                    className={classNames(\r\n                                        'contact__complete-text',\r\n                                        `contact__complete-text--${status}`\r\n                                    )}\r\n                                    style={getDelay(tokens.base.durationXS)}\r\n                                >\r\n                                    I’ll get back to you within a couple days, sit tight\r\n                                </Text>\r\n                                <Button\r\n                                    secondary\r\n                                    iconHoverShift\r\n                                    className={classNames(\r\n                                        'contact__complete-button',\r\n                                        `contact__complete-button--${status}`\r\n                                    )}\r\n                                    style={getDelay(tokens.base.durationM)}\r\n                                    href=\"/\"\r\n                                    icon=\"chevronRight\"\r\n                                >\r\n                                    Back to homepage\r\n                                </Button>\r\n                            </div>\r\n                        )}\r\n                    </Transition>\r\n                )}\r\n            </TransitionGroup>\r\n        </Section>\r\n    )\r\n}\r\n\r\nexport default Contact\r\n","export default __webpack_public_path__ + \"static/media/gotham-bold.73ce573b.woff2\";","import { Fragment } from 'react'\r\nimport classNames from 'classnames'\r\nimport { Helmet } from 'react-helmet'\r\nimport GothamBold from 'assets/fonts/gotham-bold.woff2'\r\nimport './index.css'\r\n\r\nconst Heading = ({\r\n    children,\r\n    level = 1,\r\n    as,\r\n    align = 'auto',\r\n    weight = 'medium',\r\n    className,\r\n    ...rest\r\n}) => {\r\n    const clampedLevel = Math.min(Math.max(level, 0), 4)\r\n    const Component = as || `h${Math.max(clampedLevel, 1)}`\r\n\r\n    return (\r\n        <Fragment>\r\n            {/* Conditionally load the bold font weight because we use it less frequently */}\r\n            {weight === 'bold' && (\r\n                <Helmet>\r\n                    <link rel=\"preload\" href={GothamBold} as=\"font\" crossorigin=\"\" />\r\n                    <style>\r\n                        {`\r\n              @font-face {\r\n                font-family: 'Gotham';\r\n                font-weight: 700;\r\n                src: url(${GothamBold}) format('woff2');\r\n                font-display: swap;\r\n              }\r\n            `}\r\n                    </style>\r\n                </Helmet>\r\n            )}\r\n            <Component\r\n                className={classNames(\r\n                    className,\r\n                    'heading',\r\n                    `heading--align-${align}`,\r\n                    `heading--level-${clampedLevel}`,\r\n                    `heading--weight-${weight}`\r\n                )}\r\n                {...rest}\r\n            >\r\n                {children}\r\n            </Component>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default Heading\r\n","import classNames from 'classnames'\r\nimport './index.css'\r\n\r\nconst Text = ({\r\n    children,\r\n    size = 'm',\r\n    as: Component = 'p',\r\n    align = 'auto',\r\n    weight = 'auto',\r\n    secondary,\r\n    className,\r\n    ...rest\r\n}) => {\r\n    return (\r\n        <Component\r\n            className={classNames(\r\n                className,\r\n                'text',\r\n                `text--align-${align}`,\r\n                `text--size-${size}`,\r\n                `text--weight-${weight}`,\r\n                {\r\n                    'text--secondary': secondary,\r\n                }\r\n            )}\r\n            {...rest}\r\n        >\r\n            {children}\r\n        </Component>\r\n    )\r\n}\r\n\r\nexport default Text\r\n","import { forwardRef } from 'react'\r\nimport classNames from 'classnames'\r\nimport './index.css'\r\n\r\nconst Section = forwardRef(\r\n    ({ as: Component = 'div', children, className, ...rest }, ref) => (\r\n        <Component className={classNames('section', className)} ref={ref} {...rest}>\r\n            {children}\r\n        </Component>\r\n    )\r\n)\r\n\r\nexport default Section\r\n","import { useRef, useEffect, memo } from 'react'\r\nimport classNames from 'classnames'\r\nimport { usePrefersReducedMotion } from 'hooks'\r\nimport { spring, chain, delay, value } from 'popmotion'\r\nimport VisuallyHidden from 'components/VisuallyHidden'\r\nimport prerender from 'utils/prerender'\r\nimport './index.css'\r\n\r\n// prettier-ignore\r\nconst glyphs = [\r\n  'ア', 'イ', 'ウ', 'エ', 'オ',\r\n  'カ', 'キ', 'ク', 'ケ', 'コ',\r\n  'サ', 'シ', 'ス', 'セ', 'ソ',\r\n  'タ', 'チ', 'ツ', 'テ', 'ト',\r\n  'ナ', 'ニ', 'ヌ', 'ネ', 'ノ',\r\n  'ハ', 'ヒ', 'フ', 'ヘ', 'ホ',\r\n  'マ', 'ミ', 'ム', 'メ', 'モ',\r\n  'ヤ', 'ユ', 'ヨ', 'ー',\r\n  'ラ', 'リ', 'ル', 'レ', 'ロ',\r\n  'ワ', 'ヰ', 'ヱ', 'ヲ', 'ン',\r\n  'ガ', 'ギ', 'グ', 'ゲ', 'ゴ',\r\n  'ザ', 'ジ', 'ズ', 'ゼ', 'ゾ',\r\n  'ダ', 'ヂ', 'ヅ', 'デ', 'ド',\r\n  'バ', 'ビ', 'ブ', 'ベ', 'ボ',\r\n  'パ', 'ピ', 'プ', 'ペ', 'ポ',\r\n];\r\n\r\nconst CharType = {\r\n    Glyph: 'glyph',\r\n    Value: 'value',\r\n}\r\n\r\nfunction shuffle(content, output, position) {\r\n    return content.map((value, index) => {\r\n        if (index < position) {\r\n            return { type: CharType.Value, value }\r\n        }\r\n\r\n        if (position % 1 < 0.5) {\r\n            const rand = Math.floor(Math.random() * glyphs.length)\r\n            return { type: CharType.Glyph, value: glyphs[rand] }\r\n        }\r\n\r\n        return { type: CharType.Glyph, value: output[index].value }\r\n    })\r\n}\r\n\r\nconst DecoderText = ({\r\n    text,\r\n    start = true,\r\n    delay: startDelay = 0,\r\n    className,\r\n    ...rest\r\n}) => {\r\n    const output = useRef([{ type: CharType.Glyph, value: '' }])\r\n    const container = useRef()\r\n    const reduceMotion = usePrefersReducedMotion()\r\n\r\n    useEffect(() => {\r\n        const containerInstance = container.current\r\n        const content = text.split('')\r\n        let animation\r\n\r\n        const renderOutput = () => {\r\n            const characterMap = output.current.map(item => {\r\n                return `<span class=\"decoder-text__${item.type}\">${item.value}</span>`\r\n            })\r\n\r\n            containerInstance.innerHTML = characterMap.join('')\r\n        }\r\n\r\n        const springValue = value(0, position => {\r\n            output.current = shuffle(content, output.current, position)\r\n            renderOutput()\r\n        })\r\n\r\n        if (start && !animation && !reduceMotion && !prerender) {\r\n            animation = chain(\r\n                delay(startDelay),\r\n                spring({\r\n                    from: 0,\r\n                    to: content.length,\r\n                    stiffness: 8,\r\n                    damping: 5,\r\n                })\r\n            ).start(springValue)\r\n        }\r\n\r\n        if (reduceMotion) {\r\n            output.current = content.map((value, index) => ({\r\n                type: CharType.Value,\r\n                value: content[index],\r\n            }))\r\n            renderOutput()\r\n        }\r\n\r\n        return () => {\r\n            if (animation) {\r\n                animation.stop()\r\n            }\r\n        }\r\n    }, [reduceMotion, start, startDelay, text])\r\n\r\n    return (\r\n        <span className={classNames('decoder-text', className)} {...rest}>\r\n            <VisuallyHidden className=\"decoder-text__label\">{text}</VisuallyHidden>\r\n            <span aria-hidden className=\"decoder-text__content\" ref={container} />\r\n        </span>\r\n    )\r\n}\r\n\r\nexport default memo(DecoderText)\r\n","import classNames from 'classnames'\r\nimport { numToMs } from 'utils/style'\r\nimport './index.css'\r\n\r\nconst Divider = ({\r\n    lineWidth,\r\n    lineHeight,\r\n    notchWidth,\r\n    notchHeight,\r\n    collapseDelay,\r\n    collapsed,\r\n    className,\r\n    style,\r\n}) => (\r\n    <div\r\n        className={classNames('divider', className)}\r\n        style={{\r\n            '--lineWidth': lineWidth,\r\n            '--lineHeight': lineHeight,\r\n            '--notchWidth': notchWidth,\r\n            '--notchHeight': notchHeight,\r\n            '--collapseDelay': numToMs(collapseDelay),\r\n            ...style,\r\n        }}\r\n    >\r\n        <div\r\n            className={classNames('divider__line', {\r\n                'divider__line--collapsed': collapsed,\r\n            })}\r\n        />\r\n        <div\r\n            className={classNames('divider__notch', {\r\n                'divider__notch--collapsed': collapsed,\r\n            })}\r\n            style={{ '--collapseDelay': numToMs(collapseDelay + 160) }}\r\n        />\r\n    </div>\r\n)\r\n\r\nDivider.defaultProps = {\r\n    lineWidth: '100%',\r\n    lineHeight: '2px',\r\n    notchWidth: '90px',\r\n    notchHeight: '10px',\r\n    collapsed: false,\r\n    collapseDelay: 0,\r\n}\r\n\r\nexport default Divider\r\n"],"sourceRoot":""}