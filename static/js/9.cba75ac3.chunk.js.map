{"version":3,"sources":["pages/Home/DisplacementSphere.js","pages/Home/sphereVertShader.js","pages/Home/sphereFragShader.js"],"names":["DisplacementSphere","props","theme","useTheme","rgbBackground","themeId","colorWhite","start","useRef","Date","now","canvasRef","mouse","renderer","camera","scene","lights","uniforms","material","geometry","sphere","tweenRef","sphereSpring","prefersReducedMotion","usePrefersReducedMotion","isInViewport","useInViewport","windowSize","useWindowSize","useEffect","innerWidth","innerHeight","window","current","Vector2","WebGLRenderer","canvas","antialias","powerPreference","setSize","setPixelRatio","outputEncoding","sRGBEncoding","PerspectiveCamera","position","z","Scene","MeshPhongMaterial","onBeforeCompile","shader","UniformsUtils","merge","UniformsLib","time","type","value","vertexShader","fragmentShader","SphereBufferGeometry","Mesh","modifier","Math","random","add","cleanScene","cleanRenderer","dirLight","DirectionalLight","ambientLight","AmbientLight","x","y","background","Color","rgbToThreeColor","forEach","light","removeLights","width","height","adjustedHeight","aspect","updateProjectionMatrix","render","media","mobile","tablet","onMouseMove","event","rotation","clientX","clientY","toArray","values","set","spring","from","get","to","stiffness","damping","velocity","getVelocity","mass","restSpeed","addEventListener","_tweenRef$current","removeEventListener","stop","animation","animate","requestAnimationFrame","undefined","cancelAnimationFrame","_jsx","Transition","appear","in","onEnter","reflow","timeout","children","status","className","classNames","ref"],"mappings":"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","file":"static/js/9.cba75ac3.chunk.js","sourcesContent":["import { useEffect, useRef } from 'react'\r\nimport classNames from 'classnames'\r\nimport {\r\n    Vector2,\r\n    sRGBEncoding,\r\n    WebGLRenderer,\r\n    PerspectiveCamera,\r\n    Scene,\r\n    DirectionalLight,\r\n    AmbientLight,\r\n    UniformsUtils,\r\n    UniformsLib,\r\n    MeshPhongMaterial,\r\n    SphereBufferGeometry,\r\n    Mesh,\r\n    Color,\r\n} from 'three'\r\nimport { spring, value } from 'popmotion'\r\nimport vertShader from './sphereVertShader'\r\nimport fragShader from './sphereFragShader'\r\nimport { Transition } from 'react-transition-group'\r\nimport { useTheme } from 'components/ThemeProvider'\r\nimport { usePrefersReducedMotion, useInViewport, useWindowSize } from 'hooks'\r\nimport { reflow } from 'utils/transition'\r\nimport { media, rgbToThreeColor } from 'utils/style'\r\nimport { cleanScene, removeLights, cleanRenderer } from 'utils/three'\r\nimport './DisplacementSphere.css'\r\n\r\nconst DisplacementSphere = props => {\r\n    const theme = useTheme()\r\n    const { rgbBackground, themeId, colorWhite } = theme\r\n    const start = useRef(Date.now())\r\n    const canvasRef = useRef()\r\n    const mouse = useRef()\r\n    const renderer = useRef()\r\n    const camera = useRef()\r\n    const scene = useRef()\r\n    const lights = useRef()\r\n    const uniforms = useRef()\r\n    const material = useRef()\r\n    const geometry = useRef()\r\n    const sphere = useRef()\r\n    const tweenRef = useRef()\r\n    const sphereSpring = useRef()\r\n    const prefersReducedMotion = usePrefersReducedMotion()\r\n    const isInViewport = useInViewport(canvasRef)\r\n    const windowSize = useWindowSize()\r\n\r\n    useEffect(() => {\r\n        const { innerWidth, innerHeight } = window\r\n        mouse.current = new Vector2(0.8, 0.5)\r\n        renderer.current = new WebGLRenderer({\r\n            canvas: canvasRef.current,\r\n            antialias: false,\r\n            powerPreference: 'high-performance',\r\n        })\r\n        renderer.current.setSize(innerWidth, innerHeight)\r\n        renderer.current.setPixelRatio(1)\r\n        renderer.current.outputEncoding = sRGBEncoding\r\n\r\n        camera.current = new PerspectiveCamera(54, innerWidth / innerHeight, 0.1, 100)\r\n        camera.current.position.z = 52\r\n\r\n        scene.current = new Scene()\r\n\r\n        material.current = new MeshPhongMaterial()\r\n        material.current.onBeforeCompile = shader => {\r\n            uniforms.current = UniformsUtils.merge([\r\n                UniformsLib['ambient'],\r\n                UniformsLib['lights'],\r\n                shader.uniforms,\r\n                { time: { type: 'f', value: 0 } },\r\n            ])\r\n\r\n            shader.uniforms = uniforms.current\r\n            shader.vertexShader = vertShader\r\n            shader.fragmentShader = fragShader\r\n        }\r\n\r\n        geometry.current = new SphereBufferGeometry(32, 128, 128)\r\n\r\n        sphere.current = new Mesh(geometry.current, material.current)\r\n        sphere.current.position.z = 0\r\n        sphere.current.modifier = Math.random()\r\n        scene.current.add(sphere.current)\r\n\r\n        return () => {\r\n            cleanScene(scene.current)\r\n            cleanRenderer(renderer.current)\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const dirLight = new DirectionalLight(colorWhite, 0.6)\r\n        const ambientLight = new AmbientLight(colorWhite, themeId === 'light' ? 0.8 : 0.1)\r\n\r\n        dirLight.position.z = 200\r\n        dirLight.position.x = 100\r\n        dirLight.position.y = 100\r\n\r\n        lights.current = [dirLight, ambientLight]\r\n        scene.current.background = new Color(...rgbToThreeColor(rgbBackground))\r\n        lights.current.forEach(light => scene.current.add(light))\r\n\r\n        return () => {\r\n            removeLights(lights.current)\r\n        }\r\n    }, [rgbBackground, colorWhite, themeId])\r\n\r\n    useEffect(() => {\r\n        const { width, height } = windowSize\r\n\r\n        const adjustedHeight = height + height * 0.3\r\n        renderer.current.setSize(width, adjustedHeight)\r\n        camera.current.aspect = width / adjustedHeight\r\n        camera.current.updateProjectionMatrix()\r\n\r\n        // Render a single frame on resize when not animating\r\n        if (prefersReducedMotion) {\r\n            renderer.current.render(scene.current, camera.current)\r\n        }\r\n\r\n        if (width <= media.mobile) {\r\n            sphere.current.position.x = 14\r\n            sphere.current.position.y = 10\r\n        } else if (width <= media.tablet) {\r\n            sphere.current.position.x = 18\r\n            sphere.current.position.y = 14\r\n        } else {\r\n            sphere.current.position.x = 22\r\n            sphere.current.position.y = 16\r\n        }\r\n    }, [prefersReducedMotion, windowSize])\r\n\r\n    useEffect(() => {\r\n        const onMouseMove = event => {\r\n            const { rotation } = sphere.current\r\n\r\n            const position = {\r\n                x: event.clientX / window.innerWidth,\r\n                y: event.clientY / window.innerHeight,\r\n            }\r\n\r\n            if (!sphereSpring.current) {\r\n                sphereSpring.current = value(rotation.toArray(), values =>\r\n                    rotation.set(values[0], values[1], sphere.current.rotation.z)\r\n                )\r\n            }\r\n\r\n            tweenRef.current = spring({\r\n                from: sphereSpring.current.get(),\r\n                to: [position.y / 2, position.x / 2],\r\n                stiffness: 30,\r\n                damping: 20,\r\n                velocity: sphereSpring.current.getVelocity(),\r\n                mass: 2,\r\n                restSpeed: 0.0001,\r\n            }).start(sphereSpring.current)\r\n        }\r\n\r\n        if (!prefersReducedMotion && isInViewport) {\r\n            window.addEventListener('mousemove', onMouseMove)\r\n        }\r\n\r\n        return () => {\r\n            window.removeEventListener('mousemove', onMouseMove)\r\n            tweenRef.current?.stop()\r\n        }\r\n    }, [isInViewport, prefersReducedMotion])\r\n\r\n    useEffect(() => {\r\n        let animation\r\n\r\n        const animate = () => {\r\n            animation = requestAnimationFrame(animate)\r\n\r\n            if (uniforms.current !== undefined) {\r\n                uniforms.current.time.value = 0.00005 * (Date.now() - start.current)\r\n            }\r\n\r\n            sphere.current.rotation.z += 0.001\r\n            renderer.current.render(scene.current, camera.current)\r\n        }\r\n\r\n        if (!prefersReducedMotion && isInViewport) {\r\n            animate()\r\n        } else {\r\n            renderer.current.render(scene.current, camera.current)\r\n        }\r\n\r\n        return () => {\r\n            cancelAnimationFrame(animation)\r\n        }\r\n    }, [isInViewport, prefersReducedMotion])\r\n\r\n    return (\r\n        <Transition appear in onEnter={reflow} timeout={3000}>\r\n            {status => (\r\n                <canvas\r\n                    aria-hidden\r\n                    className={classNames(\r\n                        'displacement-sphere',\r\n                        `displacement-sphere--${status}`\r\n                    )}\r\n                    ref={canvasRef}\r\n                    {...props}\r\n                />\r\n            )}\r\n        </Transition>\r\n    )\r\n}\r\n\r\nexport default DisplacementSphere\r\n","//\r\n// GLSL textureless classic 3D noise \"cnoise\",\r\n// with an RSL-style periodic variant \"pnoise\".\r\n// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\r\n// Version: 2011-10-11\r\n//\r\n// Many thanks to Ian McEwan of Ashima Arts for the\r\n// ideas for permutation and gradient selection.\r\n//\r\n// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\r\n// Distributed under the MIT license. See LICENSE file.\r\n// https://github.com/ashima/webgl-noise\r\n//\r\n\r\nexport default `\r\nvec3 mod289(vec3 x)\r\n{\r\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\r\n}\r\n\r\nvec4 mod289(vec4 x)\r\n{\r\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\r\n}\r\n\r\nvec4 permute(vec4 x)\r\n{\r\n  return mod289(((x*34.0)+1.0)*x);\r\n}\r\n\r\nvec4 taylorInvSqrt(vec4 r)\r\n{\r\n  return 1.79284291400159 - 0.85373472095314 * r;\r\n}\r\n\r\nvec3 fade(vec3 t) {\r\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\r\n}\r\n\r\n// Classic Perlin noise\r\nfloat cnoise(vec3 P)\r\n{\r\n  vec3 Pi0 = floor(P); // Integer part for indexing\r\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\r\n  Pi0 = mod289(Pi0);\r\n  Pi1 = mod289(Pi1);\r\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\r\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\r\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\r\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\r\n  vec4 iz0 = Pi0.zzzz;\r\n  vec4 iz1 = Pi1.zzzz;\r\n\r\n  vec4 ixy = permute(permute(ix) + iy);\r\n  vec4 ixy0 = permute(ixy + iz0);\r\n  vec4 ixy1 = permute(ixy + iz1);\r\n\r\n  vec4 gx0 = ixy0 * (1.0 / 7.0);\r\n  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\r\n  gx0 = fract(gx0);\r\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\r\n  vec4 sz0 = step(gz0, vec4(0.0));\r\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\r\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\r\n\r\n  vec4 gx1 = ixy1 * (1.0 / 7.0);\r\n  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\r\n  gx1 = fract(gx1);\r\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\r\n  vec4 sz1 = step(gz1, vec4(0.0));\r\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\r\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\r\n\r\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\r\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\r\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\r\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\r\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\r\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\r\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\r\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\r\n\r\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\r\n  g000 *= norm0.x;\r\n  g010 *= norm0.y;\r\n  g100 *= norm0.z;\r\n  g110 *= norm0.w;\r\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\r\n  g001 *= norm1.x;\r\n  g011 *= norm1.y;\r\n  g101 *= norm1.z;\r\n  g111 *= norm1.w;\r\n\r\n  float n000 = dot(g000, Pf0);\r\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\r\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\r\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\r\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\r\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\r\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\r\n  float n111 = dot(g111, Pf1);\r\n\r\n  vec3 fade_xyz = fade(Pf0);\r\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\r\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\r\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\r\n  return 2.2 * n_xyz;\r\n}\r\n\r\n// Classic Perlin noise, periodic variant\r\nfloat pnoise(vec3 P, vec3 rep)\r\n{\r\n  vec3 Pi0 = mod(floor(P), rep); // Integer part, modulo period\r\n  vec3 Pi1 = mod(Pi0 + vec3(1.0), rep); // Integer part + 1, mod period\r\n  Pi0 = mod289(Pi0);\r\n  Pi1 = mod289(Pi1);\r\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\r\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\r\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\r\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\r\n  vec4 iz0 = Pi0.zzzz;\r\n  vec4 iz1 = Pi1.zzzz;\r\n\r\n  vec4 ixy = permute(permute(ix) + iy);\r\n  vec4 ixy0 = permute(ixy + iz0);\r\n  vec4 ixy1 = permute(ixy + iz1);\r\n\r\n  vec4 gx0 = ixy0 * (1.0 / 7.0);\r\n  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\r\n  gx0 = fract(gx0);\r\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\r\n  vec4 sz0 = step(gz0, vec4(0.0));\r\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\r\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\r\n\r\n  vec4 gx1 = ixy1 * (1.0 / 7.0);\r\n  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\r\n  gx1 = fract(gx1);\r\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\r\n  vec4 sz1 = step(gz1, vec4(0.0));\r\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\r\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\r\n\r\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\r\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\r\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\r\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\r\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\r\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\r\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\r\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\r\n\r\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\r\n  g000 *= norm0.x;\r\n  g010 *= norm0.y;\r\n  g100 *= norm0.z;\r\n  g110 *= norm0.w;\r\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\r\n  g001 *= norm1.x;\r\n  g011 *= norm1.y;\r\n  g101 *= norm1.z;\r\n  g111 *= norm1.w;\r\n\r\n  float n000 = dot(g000, Pf0);\r\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\r\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\r\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\r\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\r\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\r\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\r\n  float n111 = dot(g111, Pf1);\r\n\r\n  vec3 fade_xyz = fade(Pf0);\r\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\r\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\r\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\r\n  return 2.2 * n_xyz;\r\n}\r\n\r\nfloat turbulence(vec3 p) {\r\n  float w = 100.0;\r\n  float t = -.5;\r\n  for (float f = 1.0 ; f <= 10.0 ; f++) {\r\n    float power = pow(2.0, f);\r\n    t += abs(pnoise(vec3(power * p), vec3(10.0, 10.0, 10.0)) / power);\r\n  }\r\n  return t;\r\n}\r\n\r\n// START\r\nuniform float time;\r\nvarying vec2 vUv;\r\nvarying vec3 vNormal;\r\nvarying float noise;\r\n\r\nvarying vec3 vViewPosition;\r\n\r\nvoid main() {\r\n  #include <beginnormal_vertex>\r\n  #include <defaultnormal_vertex>\r\n  #include <begin_vertex>\r\n  #include <project_vertex>\r\n  #ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\r\n    vNormal = normalize(transformedNormal);\r\n  #endif\r\n\r\n  vViewPosition = - mvPosition.xyz;\r\n\r\n  vUv = uv;\r\n\r\n  noise = turbulence(0.01 * position + normal + time * 0.8);\r\n  vec3 displacement = vec3((position.x) * noise, position.y * noise, position.z * noise);\r\n  gl_Position = projectionMatrix * modelViewMatrix * vec4((position + normal) + displacement, 1.0);\r\n}\r\n`\r\n","export default `\r\n#define PHONG\r\n\r\nuniform vec3 diffuse;\r\nuniform vec3 emissive;\r\nuniform vec3 specular;\r\nuniform float shininess;\r\nuniform float opacity;\r\nuniform float time;\r\nvarying vec2 vUv;\r\nvarying vec3 newPosition;\r\nvarying float noise;\r\n\r\n#include <common>\r\n#include <packing>\r\n#include <color_pars_fragment>\r\n#include <uv_pars_fragment>\r\n#include <uv2_pars_fragment>\r\n#include <map_pars_fragment>\r\n#include <alphamap_pars_fragment>\r\n#include <aomap_pars_fragment>\r\n#include <lightmap_pars_fragment>\r\n#include <emissivemap_pars_fragment>\r\n#include <envmap_pars_fragment>\r\n#include <gradientmap_pars_fragment>\r\n#include <fog_pars_fragment>\r\n#include <bsdfs>\r\n#include <lights_pars_begin>\r\n#include <envmap_physical_pars_fragment>\r\n#include <lights_phong_pars_fragment>\r\n#include <shadowmap_pars_fragment>\r\n#include <bumpmap_pars_fragment>\r\n#include <normalmap_pars_fragment>\r\n#include <specularmap_pars_fragment>\r\n#include <logdepthbuf_pars_fragment>\r\n#include <clipping_planes_pars_fragment>\r\n\r\nvoid main() {\r\n  #include <clipping_planes_fragment>\r\n\r\n  vec3 color = vec3(vUv * (0.2 - 2.0 * noise), 1.0);\r\n  vec3 finalColors = vec3(color.b * 1.5, color.r, color.r);\r\n  vec4 diffuseColor = vec4(cos(finalColors * noise * 3.0), 1.0);\r\n  ReflectedLight reflectedLight = ReflectedLight(vec3(0.0), vec3(0.0), vec3(0.0), vec3(0.0));\r\n  vec3 totalEmissiveRadiance = emissive;\r\n\r\n  #include <logdepthbuf_fragment>\r\n  #include <map_fragment>\r\n  #include <color_fragment>\r\n  #include <alphamap_fragment>\r\n  #include <alphatest_fragment>\r\n  #include <specularmap_fragment>\r\n  #include <normal_fragment_begin>\r\n  #include <normal_fragment_maps>\r\n  #include <emissivemap_fragment>\r\n  #include <lights_phong_fragment>\r\n  #include <lights_fragment_begin>\r\n  #include <lights_fragment_maps>\r\n  #include <lights_fragment_end>\r\n  #include <aomap_fragment>\r\n\r\n  vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\r\n\r\n  #include <envmap_fragment>\r\n  #include <premultiplied_alpha_fragment>\r\n  #include <tonemapping_fragment>\r\n  #include <encodings_fragment>\r\n  #include <fog_fragment>\r\n\r\n  gl_FragColor = vec4(outgoingLight, diffuseColor.a);\r\n}\r\n`\r\n"],"sourceRoot":""}